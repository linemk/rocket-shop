package main

import (
	"log"
	"net"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"

	v1 "github.com/linemk/rocket-shop/payment/internal/delivery/v1"
	paymentRepository "github.com/linemk/rocket-shop/payment/internal/repository/payment"
	"github.com/linemk/rocket-shop/payment/internal/usecase"
	payment_v1 "github.com/linemk/rocket-shop/shared/pkg/proto/payment/v1"
)

const (
	grpcPort = "50052"
)

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	paymentRepo := paymentRepository.NewRepository()

	// –°–æ–∑–¥–∞–µ–º UseCase
	paymentUseCase := usecase.NewUseCase(paymentRepo)

	// –°–æ–∑–¥–∞–µ–º API handler
	api := v1.NewAPI(paymentUseCase)

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	lis, err := net.Listen("tcp", ":"+grpcPort)
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º PaymentService
	payment_v1.RegisterPaymentServiceServer(grpcServer, api)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	reflection.Register(grpcServer)

	log.Printf("üí≥ PaymentService starting on port %s", grpcPort)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}
