// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linemk/rocket-shop/payment/internal/usecase (interfaces: PaymentUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/linemk/rocket-shop/payment/internal/entyties/models"
	payment_v1 "github.com/linemk/rocket-shop/shared/pkg/proto/payment/v1"
)

// MockPaymentUseCase is a mock of PaymentUseCase interface.
type MockPaymentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUseCaseMockRecorder
}

// MockPaymentUseCaseMockRecorder is the mock recorder for MockPaymentUseCase.
type MockPaymentUseCaseMockRecorder struct {
	mock *MockPaymentUseCase
}

// NewMockPaymentUseCase creates a new mock instance.
func NewMockPaymentUseCase(ctrl *gomock.Controller) *MockPaymentUseCase {
	mock := &MockPaymentUseCase{ctrl: ctrl}
	mock.recorder = &MockPaymentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUseCase) EXPECT() *MockPaymentUseCaseMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockPaymentUseCase) GetTransaction(arg0 context.Context, arg1 string) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockPaymentUseCaseMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockPaymentUseCase)(nil).GetTransaction), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockPaymentUseCase) ListTransactions(arg0 context.Context, arg1 string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockPaymentUseCaseMockRecorder) ListTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockPaymentUseCase)(nil).ListTransactions), arg0, arg1)
}

// PayOrder mocks base method.
func (m *MockPaymentUseCase) PayOrder(arg0 context.Context, arg1, arg2 string, arg3 payment_v1.PaymentMethod) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockPaymentUseCaseMockRecorder) PayOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockPaymentUseCase)(nil).PayOrder), arg0, arg1, arg2, arg3)
}
