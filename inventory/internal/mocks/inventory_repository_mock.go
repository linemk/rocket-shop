// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linemk/rocket-shop/inventory/internal/repository (interfaces: InventoryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/linemk/rocket-shop/inventory/internal/entyties/models"
)

// MockInventoryRepository is a mock of InventoryRepository interface.
type MockInventoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryRepositoryMockRecorder
}

// MockInventoryRepositoryMockRecorder is the mock recorder for MockInventoryRepository.
type MockInventoryRepositoryMockRecorder struct {
	mock *MockInventoryRepository
}

// NewMockInventoryRepository creates a new mock instance.
func NewMockInventoryRepository(ctrl *gomock.Controller) *MockInventoryRepository {
	mock := &MockInventoryRepository{ctrl: ctrl}
	mock.recorder = &MockInventoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryRepository) EXPECT() *MockInventoryRepositoryMockRecorder {
	return m.recorder
}

// CreatePart mocks base method.
func (m *MockInventoryRepository) CreatePart(arg0 context.Context, arg1 models.Part) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePart indicates an expected call of CreatePart.
func (mr *MockInventoryRepositoryMockRecorder) CreatePart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePart", reflect.TypeOf((*MockInventoryRepository)(nil).CreatePart), arg0, arg1)
}

// DeletePart mocks base method.
func (m *MockInventoryRepository) DeletePart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePart indicates an expected call of DeletePart.
func (mr *MockInventoryRepositoryMockRecorder) DeletePart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePart", reflect.TypeOf((*MockInventoryRepository)(nil).DeletePart), arg0, arg1)
}

// GetPart mocks base method.
func (m *MockInventoryRepository) GetPart(arg0 context.Context, arg1 string) (models.Part, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPart", arg0, arg1)
	ret0, _ := ret[0].(models.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPart indicates an expected call of GetPart.
func (mr *MockInventoryRepositoryMockRecorder) GetPart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPart", reflect.TypeOf((*MockInventoryRepository)(nil).GetPart), arg0, arg1)
}

// ListParts mocks base method.
func (m *MockInventoryRepository) ListParts(arg0 context.Context, arg1 models.PartFilter) ([]models.Part, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParts", arg0, arg1)
	ret0, _ := ret[0].([]models.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockInventoryRepositoryMockRecorder) ListParts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockInventoryRepository)(nil).ListParts), arg0, arg1)
}

// UpdatePart mocks base method.
func (m *MockInventoryRepository) UpdatePart(arg0 context.Context, arg1 string, arg2 models.Part) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePart indicates an expected call of UpdatePart.
func (mr *MockInventoryRepositoryMockRecorder) UpdatePart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePart", reflect.TypeOf((*MockInventoryRepository)(nil).UpdatePart), arg0, arg1, arg2)
}
