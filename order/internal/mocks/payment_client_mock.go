// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linemk/rocket-shop/order/internal/client/grpc/payment/v1 (interfaces: PaymentClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	payment_v1 "github.com/linemk/rocket-shop/shared/pkg/proto/payment/v1"
)

// MockPaymentClient is a mock of PaymentClient interface.
type MockPaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentClientMockRecorder
}

// MockPaymentClientMockRecorder is the mock recorder for MockPaymentClient.
type MockPaymentClientMockRecorder struct {
	mock *MockPaymentClient
}

// NewMockPaymentClient creates a new mock instance.
func NewMockPaymentClient(ctrl *gomock.Controller) *MockPaymentClient {
	mock := &MockPaymentClient{ctrl: ctrl}
	mock.recorder = &MockPaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentClient) EXPECT() *MockPaymentClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPaymentClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPaymentClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPaymentClient)(nil).Close))
}

// PayOrder mocks base method.
func (m *MockPaymentClient) PayOrder(arg0 context.Context, arg1, arg2 string, arg3 payment_v1.PaymentMethod) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockPaymentClientMockRecorder) PayOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockPaymentClient)(nil).PayOrder), arg0, arg1, arg2, arg3)
}
