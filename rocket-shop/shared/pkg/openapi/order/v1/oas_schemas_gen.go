// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *UnexpectedErrStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/bad_request
type BadRequest struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequest) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequest) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequest) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequest) SetMessage(val string) {
	s.Message = val
}

func (*BadRequest) createOrderRes() {}
func (*BadRequest) payOrderRes()    {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #/components/schemas/conflict_err
type ConflictErr struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictErr) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictErr) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictErr) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictErr) SetMessage(val string) {
	s.Message = val
}

func (*ConflictErr) cancelOrderRes() {}
func (*ConflictErr) payOrderRes()    {}

// Ref: #/components/schemas/create_order_req
type CreateOrderReq struct {
	// UUID пользователя.
	UserUUID uuid.UUID `json:"user_uuid"`
	// UUID деталей заказа (минимум 1 деталь).
	PartUuids []uuid.UUID `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderReq) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderReq) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderReq) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderReq) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// Ref: #/components/schemas/create_order_resp
type CreateOrderResp struct {
	// UUID заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Общая цена заказа.
	TotalPrice float32 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResp) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResp) GetTotalPrice() float32 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResp) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResp) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

func (*CreateOrderResp) createOrderRes() {}

// Ref: #/components/schemas/get_order_resp
type GetOrderResp struct {
	// UUID заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// UUID пользователя.
	UserUUID uuid.UUID `json:"user_uuid"`
	// UUID деталей заказа.
	PartUuids []uuid.UUID `json:"part_uuids"`
	// Общая цена заказа.
	TotalPrice float32 `json:"total_price"`
	// UUID транзакции.
	TransactionUUID uuid.UUID     `json:"transaction_uuid"`
	PaymentMethod   PaymentMethod `json:"payment_method"`
	Status          OrderStatus   `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *GetOrderResp) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *GetOrderResp) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *GetOrderResp) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GetOrderResp) GetTotalPrice() float32 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *GetOrderResp) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *GetOrderResp) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *GetOrderResp) GetStatus() OrderStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *GetOrderResp) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *GetOrderResp) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *GetOrderResp) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GetOrderResp) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *GetOrderResp) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *GetOrderResp) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *GetOrderResp) SetStatus(val OrderStatus) {
	s.Status = val
}

func (*GetOrderResp) getOrderRes() {}

// Ref: #/components/schemas/not_found_err
type NotFoundErr struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundErr) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundErr) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundErr) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundErr) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundErr) cancelOrderRes() {}
func (*NotFoundErr) getOrderRes()    {}
func (*NotFoundErr) payOrderRes()    {}

// NewOptCreateOrderReq returns new OptCreateOrderReq with value set to v.
func NewOptCreateOrderReq(v CreateOrderReq) OptCreateOrderReq {
	return OptCreateOrderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderReq is optional CreateOrderReq.
type OptCreateOrderReq struct {
	Value CreateOrderReq
	Set   bool
}

// IsSet returns true if OptCreateOrderReq was set.
func (o OptCreateOrderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderReq) Reset() {
	var v CreateOrderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderReq) SetTo(v CreateOrderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderReq) Get() (v CreateOrderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderReq) Or(d CreateOrderReq) CreateOrderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Статус заказа.
// Ref: #/components/schemas/order_status
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pay_order_req
type PayOrderReq struct {
	// Способ оплаты заказа.
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderReq) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderReq) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/pay_order_resp
type PayOrderResp struct {
	// UUID транзакции платежа.
	TransactionUUID uuid.UUID `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResp) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResp) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

func (*PayOrderResp) payOrderRes() {}

// Способ оплаты заказа.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodUNKNOWN       PaymentMethod = "UNKNOWN"
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNKNOWN,
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNKNOWN:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNKNOWN:
		*s = PaymentMethodUNKNOWN
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/unexpected_err
type UnexpectedErr struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnexpectedErr) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnexpectedErr) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnexpectedErr) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnexpectedErr) SetMessage(val string) {
	s.Message = val
}

// UnexpectedErrStatusCode wraps UnexpectedErr with StatusCode.
type UnexpectedErrStatusCode struct {
	StatusCode int
	Response   UnexpectedErr
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrStatusCode) GetResponse() UnexpectedErr {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrStatusCode) SetResponse(val UnexpectedErr) {
	s.Response = val
}
